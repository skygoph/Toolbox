using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.IO;
using System.Data;
using System.Data.SqlClient;
using System.Reflection;

namespace FileUpload.Models
{
    public static class Utilities
    {

        public static string StorageRoot
        {
            get { return HttpContext.Current.Server.MapPath("~/Files"); }            
        }

        public static string MemoStorageRoot
        {
            get { return HttpContext.Current.Server.MapPath("~/Memos"); }
        }

        public static string NotiStorageRoot
        {
            get { return HttpContext.Current.Server.MapPath("~/Notifications"); }
        }

        public static string PolicyStorageRoot
        {
            get { return HttpContext.Current.Server.MapPath("~/Policies"); }
        }

        public static string EmpNoticeRoot
        {
            get { return HttpContext.Current.Server.MapPath("~/Notice"); }
        }

        public static string TrimSpaces(string str)
        {
            str = str.Trim();
            str = str.Replace(" ", "");

            return str;
        }

        public static string DBLookup(string strSQL)
        {
            var dbMgr = new dbManager();
            string result = string.Empty;

            try
            {
                using (SqlConnection conn = new SqlConnection(dbMgr.getSQLConnectionString()))
                {
                    using (SqlCommand cmd = new SqlCommand(strSQL, conn))
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandType = CommandType.Text;

                        conn.Open();
                        using (SqlDataReader rdr = cmd.ExecuteReader())
                        {
                            while (rdr.Read()) {
                                result = rdr[0].ToString();
                                break;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message.ToString());
            }

            return result;
        }

        public static bool isRecordExists(string strSQL)
        {
            var dbMgr = new dbManager();
            bool result = false;

            try
            {
                using (SqlConnection conn = new SqlConnection(dbMgr.getSQLConnectionString()))
                {
                    using (SqlCommand cmd = new SqlCommand(strSQL, conn))
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandType = CommandType.Text;

                        conn.Open();
                        using (SqlDataReader rdr = cmd.ExecuteReader())
                        {
                            if (rdr.HasRows) 
                            {
                                result = true;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                result = false;
                throw new Exception(ex.Message.ToString());
            }

            return result;
        }

        public static string DeleteFile(int intId, string fileName, string docType)
        {
            var dbMgr = new dbManager();
            string result = string.Empty;

            try
            {
                using (SqlConnection conn = new SqlConnection(dbMgr.getSQLConnectionString()))
                {
                    using (SqlCommand cmd = new SqlCommand("Trn_DeleteOtherUpload", conn))
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(new SqlParameter("@intID", intId));
                        cmd.Parameters.Add(new SqlParameter("@Type", docType));
                        cmd.Parameters.Add(new SqlParameter("@fileName", fileName));                        

                        conn.Open();
                        result = (string)cmd.ExecuteScalar();

                    }
                }
            }
            catch (Exception e) {
                throw new Exception(e.Message.ToString());
            }

            return result;
        }

        public static string GetAutoGeneratedNo(int intMstDepartment)
        {
            var dbMgr = new dbManager();
            string result = string.Empty;

            try
            {
                using (SqlConnection conn = new SqlConnection(dbMgr.getSQLConnectionString()))
                {
                    using (SqlCommand cmd = new SqlCommand("[GenerateNo]", conn))
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(new SqlParameter("@intMstDepartment", intMstDepartment));

                        conn.Open();
                        using (SqlDataReader rdr = cmd.ExecuteReader())
                        {
                            while (rdr.Read())
                            {
                                result = rdr[0].ToString();
                                break;
                            }
                        }
                    }
                }

                string[] items = result.Split('~');
                result = items[0] + '-' + items[1].ToString().PadLeft(4, '0') + '-' + items[2];
            }
            catch (Exception)
            {
                result = "ERROR";
            }

            return result;
        }

        public static int GetDepartmentID(string username)
        {
            var dbMgr = new dbManager();
            int result = 0;

            try
            {
                using (SqlConnection conn = new SqlConnection(dbMgr.getSQLConnectionString()))
                {
                    using (SqlCommand cmd = new SqlCommand("GetDepartmentID", conn))
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(new SqlParameter("@Username", username));

                        conn.Open();
                        using (SqlDataReader rdr = cmd.ExecuteReader())
                        {
                            while (rdr.Read())
                            {
                                result = Convert.ToInt32(rdr[0] == DBNull.Value ? 0 : rdr[0]);
                                break;
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
                result = 0;
            }

            return result;
        }

        public static string GetAutoGenerateLastNo(string theType)
        {
            var dbMgr = new dbManager();
            string result = string.Empty;

            try
            {
                using (SqlConnection conn = new SqlConnection(dbMgr.getSQLConnectionString()))
                {
                    using (SqlCommand cmd = new SqlCommand("[GenerateLastNo]", conn))
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(new SqlParameter("@theType", theType));

                        conn.Open();
                        using (SqlDataReader rdr = cmd.ExecuteReader())
                        {
                            while (rdr.Read())
                            {
                                result = rdr[0].ToString();
                                break;
                            }
                        }
                    }
                }

                string[] items = result.Split('~');
                if (theType == "Memo")                
                    result = items[0] + ' ' + items[1].ToString().PadLeft(4, '0');
                else
                    result = items[0] + '-' + items[1].ToString().PadLeft(4, '0') + '-' + items[2];
            }
            catch (Exception)
            {
                result = "ERROR";
            }

            return result;
        }

        public static List<T> DataTableToList<T>(this DataTable table) where T : class, new()
        {
            try
            {
                List<T> list = new List<T>();

                foreach (var row in table.AsEnumerable())
                {
                    T obj = new T();

                    foreach (var prop in obj.GetType().GetProperties())
                    {
                        try
                        {
                            PropertyInfo propertyInfo = obj.GetType().GetProperty(prop.Name);
                            propertyInfo.SetValue(obj, Convert.ChangeType(row[prop.Name], propertyInfo.PropertyType), null);
                        }
                        catch
                        {
                            continue;
                        }
                    }

                    list.Add(obj);
                }

                return list;
            }
            catch
            {
                return null;
            }
        }
       
    }
}